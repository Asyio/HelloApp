create table USERS (
    uid varchar(20) primary key not null unique,
    username varchar(50) not null,
    age int,
    gender boolean not null,
    portrait varchar(255),
    real_name varchar(50),
    ID_number varchar(50),
    following_amount int,
    follower_amount int,
    mutual_follow_amount int,
    location varchar(255)
);

create table POSTS(
    pid int primary key auto_increment not null unique ,
    uid varchar(20) not null ,
    post_category int not null,
    comment_amount int default 0,
    post_time datetime,
    forward_amount int,
    origin int,
    foreign key (uid) references USERS(uid)
);

create table SOUNDS_CONTENT(
    pid int not null,
    sound varchar(255),
    foreign key (pid) references POSTS(pid)
);

create table POSTS_CONTENT(
    pid int not null,
    content varchar(255),
    foreign key (pid) references POSTS(pid)
);

create table VOTES(
    pid int not null,
    topic varchar(255),
    option1 varchar(100),
    option1_amount int default 0,
    option2 varchar(100),
    option2_amount int default 0,
    option3 varchar(100),
    option3_amount int default 0,
    option4 varchar(100),
    option4_amount int default 0,
    option5 varchar(100),
    option5_amount int default 0,
    option6 varchar(100),
    option6_amount int default 0,
    foreign key (pid) references POSTS(pid)
);

create table COMMENTS(
    cid int primary key,
    pid int not null,
    uid varchar(20),
    comment_time datetime,
    comment_content varchar(255),
    foreign key (pid) references POSTS(pid),
    foreign key (uid) references USERS(uid)
);

create table COLLECTIONS(
    pid int not null,
    uid varchar(20) not null,
    collect_time datetime,
    foreign key (pid) references POSTS(pid),
    foreign key (uid) references USERS(uid)
);

create table TAGS(
    uid varchar(20),
    tag_name varchar(20),
    foreign key (uid) references USERS(uid)
);

create table AUTHENTICATIONS(
    uid varchar(20) not null,
    authentication_name varchar(20),
    foreign key (uid) references USERS(uid)
);

create table PRESENTS(
    uid varchar(20) not null,
    from_uid varchar(20) not null,
    present_category varchar(20),
    receive_time datetime,
    is_exchange boolean,
    foreign key (uid) references USERS(uid)
);

create table PRESENTS_CATEGORIES(
    present_category varchar(20)
);

create table BLACKLISTS(
    uid varchar(20) not null,
    black_uid varchar(20) not null,
    mutual_black boolean,
    foreign key (uid) references USERS(uid)
);

create table SUBSCRIPTIONS(
    uid varchar(20) not null,
    following_uid varchar(20) not null,
    mutual_following boolean,
    foreign key (uid) references USERS(uid)
);

create table WALLETS(
    wid int not null primary key,
    uid varchar(20) not null,
    balance int default 0,
    coin_amount int default 0,
    can_withdraw int default 0,
    coupon_amount int default 0,
    foreign key (uid) references USERS(uid)
);

create table COIN_ORDERS(
    oid int primary key auto_increment,
    uid varchar(20) not null,
    from_uid varchar(20) not null,
    coin_figure int not null,
    order_time datetime,
    foreign key (uid) references USERS(uid)
);

create table TRANSACTION_DETAILS(
    tid int primary key auto_increment,
    uid varchar(20) not null,
    is_withdraw boolean not null ,
    transaction_figure int not null ,
    transaction_time datetime,
    foreign key (uid) references USERS(uid)
);

create table COUPONS(
    uid varchar(20) not null,
    reach int not null,
    subtract int not null,
    indate datetime,
    foreign key (uid) references USERS(uid)
);